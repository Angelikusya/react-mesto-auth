{"ast":null,"code":"export default class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.token = options.token;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  //подтягиваем карточки\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(this._checkResponse);\n  }\n\n  //подтягиваем имя и работу\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this.token\n      }\n    }).then(this._checkResponse);\n  }\n\n  //отправляем имя и работу на сервер\n  setUserInfo(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkResponse);\n  }\n\n  // отправляем ссылку на новый аватар на сервер\n  setUserAvatar(avatar) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  //отправляем новую карточку на сервер\n  addCard(name, link) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._checkResponse);\n  }\n\n  // удаляем карточку с сервера\n  removeCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.token\n      }\n    }).then(this._checkResponse);\n  }\n\n  // добавляем и убираем лайк карточке на сервере\n  changeLikeCardStatus(card, isLiked) {\n    return fetch(`${this.baseUrl}/cards/${card}/likes`, {\n      method: !isLiked ? \"DELETE\" : \"PUT\",\n      headers: {\n        authorization: this.token\n      }\n    }).then(this._checkResponse);\n  }\n}\n\n// вызов Api\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-72\",\n  token: \"f0a7d939-ec7a-4869-a9eb-1d96ec39a9dd\"\n});\nexport { api };","map":{"version":3,"names":["Api","constructor","options","baseUrl","token","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","headers","authorization","then","getUserInfo","method","setUserInfo","name","about","_baseUrl","_headers","body","JSON","stringify","setUserAvatar","avatar","addCard","link","removeCard","cardId","changeLikeCardStatus","card","isLiked","api"],"sources":["/Users/anzhelika/Desktop/dev/mesto-react/src/utils/api.js"],"sourcesContent":["export default class Api {\n    constructor(options) {\n        this.baseUrl = options.baseUrl;\n        this.token = options.token;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`)\n    };\n\n    //подтягиваем карточки\n    getInitialCards() {\n        return fetch (`${this.baseUrl}/cards`, {\n            headers: {\n                authorization: this.token    \n            }   \n        })\n        .then(this._checkResponse)\n    } \n\n    //подтягиваем имя и работу\n    getUserInfo() {\n        return fetch(`${this.baseUrl}/users/me`, {\n            method: 'GET',\n            headers: {\n                authorization: this.token\n            }\n        })\n        .then(this._checkResponse)\n    }\n\n    //отправляем имя и работу на сервер\n    setUserInfo(name, about) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                about: about\n            })\n        })\n        .then(this._checkResponse)\n    }\n\n    // отправляем ссылку на новый аватар на сервер\n    setUserAvatar(avatar) {\n        return fetch (`${this.baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: avatar\n            })\n        })\n    .then(this._checkResponse)\n    }\n\n    //отправляем новую карточку на сервер\n    addCard(name, link) {\n        return fetch (`${this.baseUrl}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                link: link\n            })\n        })\n        .then(this._checkResponse) \n    }\n    \n    // удаляем карточку с сервера\n    removeCard(cardId) {\n        return fetch(`${this.baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this.token\n            }\n        })\n        .then(this._checkResponse);\n    }\n\n    // добавляем и убираем лайк карточке на сервере\n    changeLikeCardStatus(card, isLiked) {\n        return fetch(`${this.baseUrl}/cards/${card}/likes`, {\n            method: !isLiked ? \"DELETE\" : \"PUT\",\n            headers: {\n                authorization: this.token\n            }\n        })\n        .then(this._checkResponse)\n    }\n}\n\n\n// вызов Api\nconst api = new Api ({\n    baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-72\",\n    token: \"f0a7d939-ec7a-4869-a9eb-1d96ec39a9dd\"\n  });\n\n  export {api};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}